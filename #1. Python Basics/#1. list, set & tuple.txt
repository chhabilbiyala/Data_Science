1) Lists:
Definition: A list is a mutable, ordered sequence of elements. Created using square brackets [].
Mutability: Lists are mutable, meaning you can modify their content (add, remove, or change elements).
Syntax: my_list = [1, 2, 3, 'apple', 'banana']
Operations:
  Append: my_list.append(4)
  Remove: my_list.remove('apple')
  Indexing: element = my_list[2]
  Slicing: subset = my_list[1:4]
-------------------------------------------------------------------------
2) Sets:
Definition: A set is an unordered collection of unique elements. Created using curly braces {} or the set() constructor.
Uniqueness: Sets do not allow duplicate elements.
Syntax: my_set = {1, 2, 3, 'apple', 'banana'}
Operations:
  Add: my_set.add(4)
  Remove: my_set.remove('apple')
  Union: union_set = set1.union(set2)
  Intersection: intersection_set = set1.intersection(set2)
-------------------------------------------------------------------------
3) Tuples:
Definition: A tuple is an immutable, ordered sequence of elements. Created using parentheses ().
Immutability: Tuples are immutable; once created, their elements cannot be changed.
Syntax: my_tuple = (1, 2, 3, 'apple', 'banana')
Operations:
  Access: element = my_tuple[2]
  Slicing: subset = my_tuple[1:4]
  Concatenation: new_tuple = my_tuple + (4, 5)
-------------------------------------------------------------------------
Common Characteristics:
  Iteration: All three (lists, sets, and tuples) can be iterated over using loops.
  Heterogeneity: They can hold elements of different data types.
  Membership Test: You can check if an element is present using in and not in operators.
  Length: The len() function can be used to determine the number of elements.
  Type-Specific Methods: Each has methods specific to its type (e.g., append() for lists, add() for sets).
  -------------------------------------------------------------------------
